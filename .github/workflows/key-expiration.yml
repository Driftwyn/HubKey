name: Key Expiration Check

on:
  schedule:
    - cron: '0 * * * *'  # Runs at the top of every hour
  workflow_dispatch:  # Allows manual trigger

jobs:
  handle-expiration:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Install jq (for JSON processing)
      run: sudo apt-get install jq

    - name: Get current keys
      id: get_keys
      run: |
        curl -o keys.json https://raw.githubusercontent.com/${{ github.repository }}/main/keys.json
        
    - name: Remove expired keys
      id: remove_expired_keys
      run: |
        # Get current date in Unix timestamp format
        current_timestamp=$(date +%s)

        # Loop through all keys in the JSON file and remove expired ones
        jq -r --arg current_timestamp "$current_timestamp" '
          .keys |= map(select(
            (($current_timestamp | tonumber) - (fromdateiso8601 .created)) < 86400
          ))
        ' keys.json > new_keys.json
        
        # Print updated keys
        cat new_keys.json

    - name: Commit and push changes if keys have been removed
      run: |
        git config --global user.name "GitHub Action"
        git config --global user.email "github-actions@github.com"
        
        # Add changes to git if keys were removed
        git add new_keys.json
        git commit -m "Remove expired keys"
        git push

    - name: Add new key
      run: |
        new_key="NEWKEY-1234-5678"
        current_timestamp=$(date --utc +%Y-%m-%dT%H:%M:%SZ)
        
        # Add new key to the updated keys.json
        jq --arg key "$new_key" --arg created "$current_timestamp" \
          '.keys += [{"key": $key, "created": $created}]' new_keys.json > updated_keys.json
          
        # Commit and push the new key
        mv updated_keys.json new_keys.json
        git add new_keys.json
        git commit -m "Add new key"
        git push
